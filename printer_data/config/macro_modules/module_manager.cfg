[gcode_macro _MODULE_MGR_CFG]
variable_enable_modules: ["test_module", "other_test_module"]
gcode:

[gcode_macro _MODULE_MGR_VARS]
variable_enabled_modules:   []
variable_loaded_modules:    []
variable_failed_to_enable:	[]
variable_debug_mode:	True
gcode:
# -----

[include ./echo.cfg]

[gcode_macro ENABLE_DEBUG]
gcode:
	SET_GCODE_VARIABLE MACRO=DEBUG_ECHO VARIABLE=prefix_filter VALUE="'{params.FILTER|default('')|lower}'"
	SET_GCODE_VARIABLE MACRO=_MODULE_MGR_VARS VARIABLE=debug_mode VALUE=True
	FANCY_ECHO PREFIX="DEBUG" MSG="Debugging enabled." COLOUR="info"

[gcode_macro DISABLE_DEBUG]
gcode:
	SET_GCODE_VARIABLE MACRO=_MODULE_MGR_VARS VARIABLE=debug_mode VALUE=False
	FANCY_ECHO PREFIX="DEBUG" MSG="Debugging enabled." COLOUR="info"

[gcode_macro _MOD_MGR_REGISTER_MODULE]
gcode:
	{% set debug = printer["gcode_macro _MODULE_MGR_VARS"].debug_mode %}
	{% if debug %}
		{% set prefix = "Module Manager(_MOD_MGR_REGISTER_MODULE)" %}
	{% else %}
		{% set prefix = "Module Manager" %}
	{% endif %}

    {% if params.MODULE_NAME is defined %}
		{% set mod_name = params.MODULE_NAME|lower %}
		{% set lm = printer["gcode_macro _MODULE_MGR_VARS"].loaded_modules %}

		{% set temp = lm.append(mod_name) %}

		SET_GCODE_VARIABLE MACRO="_MODULE_MGR_VARS" VARIABLE="loaded_modules" VALUE="{lm}"
		DEBUG_ECHO PREFIX="{prefix}" MSG="Registered Module {mod_name}"
	{% else %}
		FANCY_ECHO PREFIX="{prefix}" MSG="Failed to load module: MODULE_NAME was not provided" COLOUR="error"
	{% endif %}

[gcode_macro _MOD_MGR_ENABLE_MODULE]
gcode:
	{% set debug = printer["gcode_macro _MODULE_MGR_VARS"].debug_mode %}
	{% if debug %}
		{% set prefix = "Module Manager(_MOD_MGR_ENABLE_MODULE)" %}
	{% else %}
		{% set prefix = "Module Manager" %}
	{% endif %}

    {% if params.MODULE_NAME is defined %}
		{% set mod_name = params.MODULE_NAME|lower %}
		{% set em = printer["gcode_macro _MODULE_MGR_VARS"].enabled_modules %}
		{% set lm = printer["gcode_macro _MODULE_MGR_VARS"].loaded_modules %}

		{% set mod_enable_macro = "_MODULE_" + mod_name|upper + "_ON_ENABLE"|upper %}
		{% set mod_meta_macro = "_MODULE_" + mod_name|upper + "_META"|upper %}

		{% if mod_name in lm %}
			{% if mod_name in em %}
				FANCY_ECHO PREFIX="{prefix}" MSG="Failed to enable module: {mod_name} is already enabled" COLOUR="error"
			{% else %}
				{mod_enable_macro}
			{% endif %}
		{% else %}
			FANCY_ECHO PREFIX="{prefix}" MSG="Failed to enable module: {mod_name} is not a loaded module" COLOUR="error"
		{% endif %}
	{% else %}
		FANCY_ECHO PREFIX="{prefix}" MSG="Failed to enable module: MODULE_NAME was not provided" COLOUR="error"
	{% endif %}

[gcode_macro _MOD_MGR_ON_ENABLE_CALLBACK]
gcode:
	{% set debug = printer["gcode_macro _MODULE_MGR_VARS"].debug_mode %}
	{% if debug %}
		{% set prefix = "Module Manager(_MOD_MGR_ON_ENABLE_CALLBACK)" %}
	{% else %}
		{% set prefix = "Module Manager" %}
	{% endif %}

	{% if params.CALLER is defined %}
		{% set mod_name = params.CALLER|lower %}
		{% set lm = printer["gcode_macro _MODULE_MGR_VARS"].loaded_modules %}
		{% set em = printer["gcode_macro _MODULE_MGR_VARS"].enabled_modules %}

		{% if mod_name in lm %}
			{% set temp = em.append(mod_name) %}
			SET_GCODE_VARIABLE MACRO="_MODULE_MGR_VARS" VARIABLE="enabled_modules" VALUE="{em}"
			DEBUG_ECHO PREFIX="{prefix}" MSG="Enabled Module {mod_name}"
		{% else %}
			DEBUG_ECHO PREFIX="{prefix}" MSG="{mod_name} is not a loaded module"
		{% endif %}
	{% else %}
		DEBUG_ECHO PREFIX="{prefix}" MSG="Callback was called, but CALLER param wasn't provided"
	{% endif %}

[gcode_macro _MOD_MGR_DISABLE_MODULE]
gcode:
	{% set debug = printer["gcode_macro _MODULE_MGR_VARS"].debug_mode %}
	{% if debug %}
		{% set prefix = "Module Manager(_MOD_MGR_DISABLE_MODULE)" %}
	{% else %}
		{% set prefix = "Module Manager" %}
	{% endif %}

    {% if params.MODULE_NAME is defined %}
		{% set mod_name = params.MODULE_NAME|lower %}
		{% set em = printer["gcode_macro _MODULE_MGR_VARS"].enabled_modules %}
		{% set lm = printer["gcode_macro _MODULE_MGR_VARS"].loaded_modules %}

		{% set mod_disable_macro = "_MODULE_" + mod_name|upper + "_ON_DISABLE"|upper %}

		{% if mod_name in lm %}
			{% if mod_name in em %}
				{mod_disable_macro}
			{% else %}
				FANCY_ECHO PREFIX="{prefix}" MSG="Failed to disable module: {mod_name} is already disabled" COLOUR="error"
			{% endif %}
		{% else %}
			FANCY_ECHO PREFIX="{prefix}" MSG="Failed to disable module: {mod_name} is not a loaded module" COLOUR="error"
		{% endif %}
	{% else %}
		FANCY_ECHO PREFIX="{prefix}" MSG="Failed to disable module: MODULE_NAME was not provided" COLOUR="error"
	{% endif %}

[gcode_macro _MOD_MGR_ON_DISABLE_CALLBACK]
gcode:
	{% set debug = printer["gcode_macro _MODULE_MGR_VARS"].debug_mode %}
	{% if debug %}
		{% set prefix = "Module Manager(_MOD_MGR_ON_DISABLE_CALLBACK)" %}
	{% else %}
		{% set prefix = "Module Manager" %}
	{% endif %}

	{% if params.CALLER is defined %}
		{% set mod_name = params.CALLER|lower %}
		{% set lm = printer["gcode_macro _MODULE_MGR_VARS"].loaded_modules %}
		{% set em = printer["gcode_macro _MODULE_MGR_VARS"].enabled_modules %}

		{% if mod_name in lm %}
			{% if mod_name in em %}
				DEBUG_ECHO PREFIX="{prefix}" MSG="{mod_name} is not an enabled module"
			{% else %}
				{% set temp = em.remove(mod_name) %}
				SET_GCODE_VARIABLE MACRO="_MODULE_MGR_VARS" VARIABLE="enabled_modules" VALUE="{em}"
				DEBUG_ECHO PREFIX="{prefix}" MSG="Disabled Module {mod_name}"
			{% endif %}
		{% else %}
			DEBUG_ECHO PREFIX="{prefix}" MSG="{mod_name} is not a loaded module"
		{% endif %}
	{% else %}
		DEBUG_ECHO PREFIX="{prefix}" MSG="Callback was called, but CALLER param wasn't provided"
	{% endif %}


[gcode_macro _MOD_MGR_POST_INIT]
gcode:
	{% set debug = printer["gcode_macro _MODULE_MGR_VARS"].debug_mode %}
	{% if debug %}
		{% set prefix = "Module Manager(_MOD_MGR_POST_INIT)" %}
	{% else %}
		{% set prefix = "Module Manager" %}
	{% endif %}

	{% set to_enable = printer["gcode_macro _MODULE_MGR_CFG"].enable_modules %}
	{% if to_enable|length == 0 %}
		FANCY_ECHO PREFIX="{prefix}" MSG="No modules enabled" COLOUR="info"
	{% else %}
		{% for mod in to_enable %}
			{% set mod_name = mod|lower %}
			_MOD_MGR_ENABLE_MODULE MODULE_NAME="{mod}"
		{% endfor %}
	{% endif %}
	_MOD_MGR_ENABLE_CONFIGURED

[gcode_macro _MOD_MGR_ENABLE_CONFIGURED]
gcode:
	{% set debug = printer["gcode_macro _MODULE_MGR_VARS"].debug_mode %}
	{% if debug %}
		{% set prefix = "Module Manager(_MOD_MGR_ENABLE_CONFIGURED)" %}
	{% else %}
		{% set prefix = "Module Manager" %}
	{% endif %}

	{% set conf_enable = printer["gcode_macro _MODULE_MGR_CFG"].enable_modules %}
	{% if conf_enable|length > 0 %}

		{% set enabled = printer["gcode_macro _MODULE_MGR_VARS"].enabled_modules %}

		{% set fail = [] %}
		{% for mod in conf_enable %}
			{% if mod not in enabled %}
				{% set temp = fail.append(mod) %}
			{% endif %}
		{% endfor %}

		{% set enabled_msg = "Enabled Modules: " ~ enabled %}
		{% set failed_msg = "Failed to enable modules: " ~ fail %}
		FANCY_ECHO PREFIX="{prefix}" MSG="{enabled_msg}" COLOUR="info"
		{% if fail|length > 0 %}
			FANCY_ECHO PREFIX="{prefix}" MSG="{failed_msg}" COLOUR="error"
		{% endif %}
	{% endif %}


